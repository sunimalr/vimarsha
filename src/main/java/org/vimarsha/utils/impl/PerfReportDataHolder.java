/*
 *
 *  vimarsha, Performance analysis: Machine Learning Approach
 *  Copyright (C) 2013 vimarsha
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program. If not, see <http://www.gnu.org/licenses/>.
 * /
 */

package org.vimarsha.utils.impl;

import org.vimarsha.exceptions.RawEventNotFoundException;
import org.vimarsha.exceptions.SymbolNotFoundException;
import org.vimarsha.utils.DataHolder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;

/**
 * A class which holds data generated by parsing the output of perf-report tool.
 *
 * @author gayashan
 */
public class PerfReportDataHolder implements DataHolder {
    private HashMap<String, HashMap<String, String>> dataStore;
    private LinkedList<String> finalSymbolsList;

    /**
     * Default constructor.
     */
    public PerfReportDataHolder() {
        this.dataStore = new HashMap<String, HashMap<String, String>>();
        this.finalSymbolsList = new LinkedList<String>();
    }

    /**
     * Add a symbol to final symbols list
     *
     * @param symbol symbol name
     */
    public void addToFinalSymbolsList(String symbol) {
        this.finalSymbolsList.add(symbol);
    }

    public void addValue(String symbol, String rawEvent, String value) {
        if (dataStore.containsKey(symbol)) {
            dataStore.get(symbol).put(rawEvent, value);
        } else {
            HashMap<String, String> tmp = new HashMap<String, String>();
            tmp.put(rawEvent, value);
            dataStore.put(symbol, tmp);
        }
    }

    /**
     * Returns a list of functions/programs
     *
     * @return ArrayList
     */
    public ArrayList<String> getSymbolsList() {
        ArrayList<String> symbolsList = new ArrayList<String>();
        symbolsList.addAll(dataStore.keySet());
        return symbolsList;
    }

    /**
     * Returns a HashMap of Raw event - value
     * key - raw event
     * value - value
     *
     * @param symbol symbol name
     * @return HashMap
     * @throws SymbolNotFoundException
     */
    public HashMap<String, String> getRawEventValueCollection(String symbol) throws SymbolNotFoundException {
        if (dataStore.containsKey(symbol)) {
            return dataStore.get(symbol);
        }
        throw new SymbolNotFoundException();
    }

    /**
     * Returns a ArrayList of raw events
     *
     * @param symbol symbol name
     * @return ArrayList
     * @throws SymbolNotFoundException
     */
    public ArrayList<String> getRawEventsCollection(String symbol) throws SymbolNotFoundException {
        if (dataStore.containsKey(symbol)) {
            return new ArrayList<String>(dataStore.get(symbol).keySet());
        }
        throw new SymbolNotFoundException();
    }

    /**
     * Returns the event count value given symbol name and performance event name
     *
     * @param symbol   symbol name
     * @param rawEvent performance event name
     * @return String
     * @throws SymbolNotFoundException
     * @throws RawEventNotFoundException
     */
    public String getValue(String symbol, String rawEvent) throws SymbolNotFoundException, RawEventNotFoundException {
        if (dataStore.containsKey(symbol)) {
            if (dataStore.get(symbol).containsKey(rawEvent)) {
                return dataStore.get(symbol).get(rawEvent);
            } else {
                throw new RawEventNotFoundException();
            }
        }
        throw new SymbolNotFoundException();
    }

    /**
     * Returns a HashMap of the raw event store
     *
     * @return HashMap
     */
    public HashMap<String, HashMap<String, String>> getDataStore() {
        return dataStore;
    }

    /**
     * Returns the final symbols list
     *
     * @return LinkedList
     */
    public LinkedList<String> getFinalSymbolsList() {
        return finalSymbolsList;
    }
}
